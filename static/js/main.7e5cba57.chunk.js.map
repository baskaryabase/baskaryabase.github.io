{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SubscriberLIst","state","open","list","id","name","number","view","edit","index","handleClickOpen","_this","setState","handleClose","handleChange","event","Object","defineProperty","target","value","addToList","concat","toConsumableArray","_this2","this","classes","props","react_default","a","createElement","style","margin","Grid_default","float","Button_default","variant","color","onClick","container","justify","flexDirection","Dialog_default","onClose","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","height","TextField_default","label","className","textField","onChange","e","objectSpread","type","DialogActions_default","slice","autoFocus","xs","Paper_default","root","Table_default","table","TableHead_default","TableRow_default","TableCell_default","align","TableBody_default","map","l","i","IconButton_default","button","aria-label","Edit_default","Delete_default","direction","bind","React","Component","withStyles","theme","width","marginTop","spacing","unit","overflowX","minWidth","marginLeft","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e5cba57.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst styles = theme => ({\n  root: {\n    width: \"100%\",\n    marginTop: theme.spacing.unit * 3,\n    overflowX: \"auto\"\n  },\n  table: {\n    minWidth: 700\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit\n  }\n});\n\nclass SubscriberLIst extends React.Component {\n  state = {\n    open: false,\n    list: [{ id: 0, name: \"Baskar\", number: 7904852282 }],\n    name: \"\",\n    number: \"\",\n    id: 0,\n    view: \"list\",\n    edit: {},\n    index: \"\"\n  };\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value\n    });\n  };\n  addToList = () => {\n    this.setState({\n      list: [\n        ...this.state.list,\n        {\n          id: this.state.id + 1,\n          name: this.state.name,\n          number: this.state.number\n        }\n      ],\n      id: this.state.id + 1,\n      view: \"list\"\n    });\n  };\n  render() {\n    const { classes } = this.props;\n\n    if (this.state.view == \"list\") {\n      return (\n        <div style={{ margin: 100 }}>\n          <Grid>\n            <div style={{ float: \"right\" }}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => {\n                  this.setState({ view: \"add\" });\n                }}\n              >\n                Add New SubScriber\n              </Button>\n            </div>\n            <Grid container justify=\"center\" flexDirection={\"column\"}>\n              {/* ADD A Subscriber modal */}\n              <Dialog\n                open={this.state.open}\n                onClose={this.handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n              >\n                <DialogTitle id=\"alert-dialog-title\">\n                  Edit Subscriber Details\n                </DialogTitle>\n                <DialogContent style={{ height: 50 }}>\n                  <TextField\n                    id=\"outlined-name\"\n                    label=\"Name\"\n                    className={classes.textField}\n                    value={this.state.edit.name}\n                    onChange={e => {\n                      this.setState({\n                        edit: { ...this.state.edit, name: e.target.value }\n                      });\n                    }}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                  />\n                  <TextField\n                    id=\"outlined-name\"\n                    label=\"Phone Number\"\n                    className={classes.textField}\n                    value={this.state.edit.number}\n                    type=\"number\"\n                    onChange={e => {\n                      this.setState({\n                        edit: { ...this.state.edit, number: e.target.value }\n                      });\n                    }}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                  />\n                </DialogContent>\n                <DialogActions>\n                  <Button onClick={this.handleClose} color=\"primary\">\n                    cancel\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      this.setState({\n                        list: [\n                          ...this.state.list.slice(0, this.state.index),\n                          this.state.edit,\n                          ...this.state.list.slice(this.state.index + 1)\n\t\t\t\t\t\t],\n\t\t\t\t\t\topen:false\n                      });\n                    }}\n                    color=\"primary\"\n                    autoFocus\n                  >\n                    Edit\n                  </Button>\n                </DialogActions>\n              </Dialog>\n              <Grid xs={12}>\n                <Paper className={classes.root}>\n                  <Table className={classes.table}>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>#</TableCell>\n                        <TableCell>Id</TableCell>\n                        <TableCell>Name</TableCell>\n                        <TableCell align=\"right\">Phone Number</TableCell>\n                        <TableCell align=\"right\">Actions</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {this.state.list.map((l, i) => {\n                        return (\n                          <TableRow>\n                            <TableCell>{i + 1}</TableCell>\n                            <TableCell>{l.id}</TableCell>\n                            <TableCell>{l.name}</TableCell>\n                            <TableCell align=\"right\">{l.number}</TableCell>\n                            <TableCell align=\"right\">\n                              <IconButton\n                                className={classes.button}\n                                aria-label=\"Edit\"\n                                onClick={() => {\n                                  this.setState({\n                                    edit: { ...l },\n                                    index: i,\n                                    open: true\n                                  });\n                                }}\n                                color=\"primary\"\n                              >\n                                <EditIcon />\n                              </IconButton>\n                              <IconButton\n                                className={classes.button}\n                                aria-label=\"Delete\"\n                                onClick={() => {\n                                  this.setState({\n                                    list: [\n                                      ...this.state.list.slice(0, i),\n                                      ...this.state.list.slice(i + 1)\n                                    ]\n                                  });\n                                }}\n                                color=\"primary\"\n                              >\n                                <DeleteIcon />\n                              </IconButton>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </Paper>\n              </Grid>\n            </Grid>\n          </Grid>\n        </div>\n      );\n    } else {\n      return (\n        <div style={{ margin: 100 }}>\n          <Grid>\n            <div>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => this.setState({ view: \"list\" })}\n              >\n                Go Back\n              </Button>\n            </div>\n            <Grid container justify=\"center\" direction={\"column\"}>\n              <TextField\n                id=\"outlined-name\"\n                label=\"Name\"\n                className={classes.textField}\n                value={this.state.name}\n                onChange={this.handleChange(\"name\")}\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n              <TextField\n                id=\"outlined-name\"\n                label=\"Phone Number\"\n                className={classes.textField}\n                value={this.state.number}\n                type=\"number\"\n                onChange={this.handleChange(\"number\")}\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n              <br />\n              <Grid>\n                Name:{this.state.name}\n                <br />\n                Number:{this.state.number}\n                <Button\n                  style={{ float: \"right\" }}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={this.addToList.bind(this)}\n                >\n                  Add Subscriber\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </div>\n      );\n    }\n  }\n}\n\nSubscriberLIst.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(SubscriberLIst);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}